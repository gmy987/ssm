<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
  <display-name>Archetype Created Web Application</display-name>
    <!-- 定义上下文参数 spring容器的xml-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:application-context.xml</param-value>
    </context-param>

    <!-- 定义 WebApplicationContext 上下文为 spring 的 XmlWebApplicationContext -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 用spring Encoding,解决乱码问题 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 配置 spring 的servlet映射 -->
    <servlet>
        <servlet-name>mvc-dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!-- contextConfigLocation配置springmvc的配置文件
                 若不配置，则默认加载/WEB-INF/servlet名称-servlet.xml文件 -->
            <!--<param-name>contextConfigLocation</param-name>-->
            <!--<param-value>classpath:</param-value>-->
            <param-name>dispatchOptionsRequest</param-name>
            <param-value>true</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>mvc-dispatcher</servlet-name>
        <!-- 第一种:*.action,访问以.action结尾的由DispatcherServlet进行解析
             第二种:/,所有访问地址都由DispatcherServlet进行解析,对于静态文件的解析需要配置不让DispatcherServlet进行解析
             使用此种方法可以实现RESTful风格的url
             第三种:/*,这样配置不对,使用这种配置,最后转发到jsp页面时,仍然会由DispatcherServlet来解析jsp,会报错 -->
        <url-pattern>*.action</url-pattern>
    </servlet-mapping>

    <!-- 配置 spring 的servlet映射,处理restful风格映射 -->
    <servlet>
        <servlet-name>mvc-dispatcher-rest</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!-- contextConfigLocation配置springmvc的配置文件
                 若不配置，则默认加载/WEB-INF/servlet名称-servlet.xml文件 -->
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/mvc-dispatcher-servlet.xml</param-value>
        </init-param>
        <load-on-startup>2</load-on-startup>
    </servlet>

    <!-- 注意,使用此种方法映射会导致图片不能加载,此问题有待解决
         解决方法: 在springmvc配置文件中,添加对静态资源的解析 -->
    <servlet-mapping>
        <servlet-name>mvc-dispatcher-rest</servlet-name>
        <!-- 第一种:*.action,访问以.action结尾的由DispatcherServlet进行解析
             第二种:/,所有访问地址都由DispatcherServlet进行解析,对于静态文件的解析需要配置不让DispatcherServlet进行解析
             使用此种方法可以实现RESTful风格的url
             第三种:/*,这样配置不对,使用这种配置,最后转发到jsp页面时,仍然会由DispatcherServlet来解析jsp,会报错 -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

</web-app>
